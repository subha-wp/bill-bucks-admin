generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String            @id @default(cuid())
  name                   String?
  avatarUrl              String?
  phoneNumber            String            @unique
  hashedPassword         String
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  subscribe              Boolean           @default(false)
  balance                Decimal           @default(0) @db.Decimal(10, 2)
  referralCode           String            @unique @default(cuid())
  referredBy             String?
  nonMerchantBillCount   Int               @default(0)
  razorpaySubscriptionId String?           @unique
  subscriptionStatus     String? // PENDING, ACTIVE, CANCELLED, FAILED
  sessions               Session[]
  invoices               Invoice[]
  referralHistory        ReferralHistory[]
  withdrawals            Withdrawal[]
  cashbacks              Cashback[]
}

model PushToken {
  id         String   @id @default(cuid())
  token      String   @unique
  platform   String?
  deviceInfo Json?
  lastUsed   DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("push_tokens")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Merchant {
  id             String         @id @default(cuid())
  name           String
  address        String
  phone          String
  city           String
  latitude       Float?
  longitude      Float?
  cashbackAmount Decimal        @default(3.00) @db.Decimal(10, 2)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  invoices       Invoice[]
  category       String?
  openingTime    String?
  closingTime    String?
  isOpen         Boolean        @default(true)
  rating         Float?         @default(0)
  logoUrl        String?
  shopImageUrl   String?
  status         String         @default("ACTIVE") // ACTIVE, SUSPENDED
  billingCycles  BillingCycle[]

  @@index([phone])
  @@index([name])
  @@index([city])
  @@index([latitude, longitude])
}

model BillingCycle {
  id            String    @id @default(cuid())
  merchantId    String
  startDate     DateTime
  endDate       DateTime
  totalAmount   Decimal   @db.Decimal(10, 2)
  totalCashback Decimal   @db.Decimal(10, 2)
  serviceCharge Decimal   @db.Decimal(10, 2)
  status        String    @default("PENDING") // PENDING, PAID, OVERDUE
  paidAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  merchant      Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@index([merchantId])
  @@index([status])
  @@index([startDate, endDate])
}

model Invoice {
  id         String    @id @default(cuid())
  amount     Decimal   @db.Decimal(10, 2)
  imageUrl   String
  status     String    @default("PENDING")
  notes      String?
  isMerchant Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  merchantId String?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  merchant   Merchant? @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  cashback   Cashback?

  @@index([userId])
  @@index([merchantId])
  @@index([status])
  @@index([createdAt])
}

model ReferralHistory {
  id             String   @id @default(cuid())
  userId         String
  referredUserId String
  amount         Decimal  @db.Decimal(10, 2)
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Withdrawal {
  id        String   @id @default(cuid())
  userId    String
  amount    Decimal  @db.Decimal(10, 2)
  upiId     String
  status    String   @default("PENDING")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model Cashback {
  id        String   @id @default(cuid())
  userId    String
  invoiceId String   @unique
  amount    Decimal  @db.Decimal(10, 2)
  type      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model Contact {
  id          String   @id @default(cuid())
  name        String?
  phoneNumber String   @unique
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([phoneNumber])
}
